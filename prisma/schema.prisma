// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev

enum TypeUser {
  FISICA
  JURIDICA
}

enum Role {
  EMPLOYEE
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BOLETO // Nome usado pela ASAAS para boleto
  PIX
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING // Aguardando pagamento
  RECEIVED // Pagamento confirmado
  CONFIRMED // Equivalente ao "COMPLETED" anterior
  OVERDUE // Boleto vencido
  REFUNDED // Reembolsado
  FAILED // Falha no pagamento
  SCHEDULED // Agendado (ex: cartão de crédito com vencimento futuro)
}

enum StatusUserEcommerce {
  DISPONIVEL
  INDISPONIVEL
}

enum StatusProduct {
  DISPONIVEL
  INDISPONIVEL
}

enum StatusDescriptionProduct {
  DISPONIVEL
  INDISPONIVEL
}

enum StatusVariant {
  DISPONIVEL
  INDISPONIVEL
}

enum ProductRelationType {
  VARIANT // Ex: iPhone 15 ↔ iPhone 15 Pro (alternativas)
  SIMPLE // Ex: { "cor": "Azul", "tamanho": "M" }
}

enum DeliveryMethod {
  DOWNLOAD // Download direto
  EMAIL // Envio por e-mail
  STREAMING // Acesso via streaming (ex: cursos)
  API // Entrega via integração com API
}

enum StatusReview {
  ANAILSE
  APPROVED
  FAILED
}

enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum DiscountType {
  PERCENTAGE // Desconto percentual
  FIXED // Desconto em valor fixo
  BOGO // Buy One Get One
  FREE_SHIPPING // Frete grátis
}

enum PromotionScope {
  PRODUCT
  VARIANT
  CATEGORY
  ORDER
  SHIPPING
}

enum PromotionStatus {
  ACTIVE
  SCHEDULED
  EXPIRED
  ARCHIVED
}

enum StatusMarketingPublication {
  Programado
  Fim_da_programacao
  Disponivel
  Disponivel_programado
  Indisponivel
}

enum StatusPromotion {
  Programado
  Fim_da_programacao
  Disponivel
  Disponivel_programado
  Indisponivel
}

enum Position {
  SLIDER
  TOP_BANNER
  SIDEBAR
  MOSAICO
  POPUP
}

enum StatusBuyTogether {
  SIM
  NAO
}

enum StatusCommentOrder {
  PRIVATE
  VISIBLE
}

enum FilterType {
  RANGE // Usado para campos numéricos (ex.: faixa de preço)
  SELECT // Seleção única (ex.: marca)
  MULTI_SELECT // Seleção múltipla (ex.: cores, tamanhos)
}

enum FilterDisplayStyle {
  SLIDER // Controlador do tipo slider, ideal para range (ex.: faixa de preço)
  DROPDOWN // Lista suspensa
  CHECKBOX // Várias opções (checkbox)
  RADIO // Seleção única (radio button)
  COLOR_PICKER // Se o filtro representar uma cor
}

enum FilterDataType {
  NUMBER
  STRING
  DATE
  BOOLEAN
}

enum MenuItemType {
  INTERNAL_LINK // Link interno, ex.: "/minha-pagina"
  EXTERNAL_LINK // Link externo, ex.: "https://www.meusite.com"
  CATEGORY // Link para uma categoria específica
  PRODUCT // Link para um produto específico (opcional)
  CUSTOM_PAGE // Link para uma página custom (ex.: CMS de páginas institucionais)
}

enum EmailProcessType {
  ORDER_PLACED // Pedido realizado
  ORDER_PAID // Pedido pago
  ORDER_CANCELED // Pedido cancelado
  USER_CREATED // Usuário administrativo criado
  CUSTOMER_REGISTERED // Cliente cadastrado
  PASSWORD_RECOVERY // Recuperação de senha
  SHIPPING_NOTIFICATION // Notificação de envio / rastreamento
}

enum NotificationType {
  INDEFINIDO
  USER
  CATEGORY
  PRODUCT
  MARKETING
  ORDER
  NEWSLETTER
  CONTACT_FORM
  CONTACT_ORDER
  REPORT
}

enum StatusCustomer {
  DISPONIVEL
  INDISPONIVEL
}

enum StatusCategory {
  DISPONIVEL
  INDISPONIVEL
}

enum ConditionType {
  FIRST_ORDER
  CART_ITEM_COUNT
  UNIQUE_VARIANT_COUNT
  ZIP_CODE
  PRODUCT_CODE
  VARIANT_CODE
  STATE
  CATEGORY
  CATEGORY_ITEM_COUNT
  CATEGORY_VALUE
  BRAND_VALUE
  VARIANT_ITEM_COUNT
  PRODUCT_ITEM_COUNT
  PERSON_TYPE
  USER
  SUBTOTAL_VALUE
  TOTAL_VALUE
}

enum Operator {
  EQUAL
  NOT_EQUAL
  GREATER
  GREATER_EQUAL
  LESS
  LESS_EQUAL
  CONTAINS
  NOT_CONTAINS
  EVERY
}

enum ActionType {
  FIXED_VARIANT_DISCOUNT
  FIXED_PRODUCT_DISCOUNT
  FREE_VARIANT_ITEM
  FREE_PRODUCT_ITEM
  PERCENT_CATEGORY
  PERCENT_VARIANT
  PERCENT_PRODUCT
  PERCENT_BRAND_ITEMS
  PERCENT_ITEM_COUNT
  PERCENT_EXTREME_ITEM
  PERCENT_SHIPPING
  PERCENT_SUBTOTAL
  PERCENT_TOTAL_NO_SHIPPING
  PERCENT_TOTAL_PER_PRODUCT
  FIXED_BRAND_ITEMS
  FIXED_SHIPPING
  FIXED_SUBTOTAL
  FIXED_TOTAL_NO_SHIPPING
  FIXED_TOTAL_PER_PRODUCT
  MAX_SHIPPING_DISCOUNT
}

enum DisplayType {
  SPOT
  PRODUCT_PAGE
}

model EcommerceData {
  id                     String  @id @default(uuid())
  name                   String
  email                  String
  phone                  String
  whatsapp               String?
  cnpj                   String?
  cpf                    String?
  street                 String
  city                   String
  state                  String
  zipCode                String
  number                 String?
  neighborhood           String?
  country                String
  logo                   String?
  favicon                String?
  privacy_policies       String?
  about_store            String?
  exchanges_and_returns  String?
  how_to_buy             String?
  shipping_delivery_time String?
  faq                    String?
  payment_methods        String?
  technical_assistance   String?

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("ecommerceDatas")
}

model SEOSettings {
  id                 String  @id @default(uuid())
  page               String  @unique
  title              String?
  description        String?
  keywords           Json?
  ogTitle            String?
  ogDescription      String?
  ogImages           Json?
  ogImageWidth       Int?
  ogImageHeight      Int?
  ogImageAlt         String?
  twitterTitle       String?
  twitterDescription String?
  twitterCreator     String?
  twitterImages      Json?

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("seoSettings")
}

model SocialMedias {
  id         String  @id @default(uuid())
  name_media String  @db.VarChar(725)
  link       String?
  logo_media String?

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("socialMedias")
}

model ThemeSettings {
  id     String @id @default(uuid())
  colors Json

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("themesSettings")
}

model UserEcommerce {
  id                        String                      @id @default(uuid())
  name                      String
  email                     String                      @unique
  password                  String
  status                    StatusUserEcommerce         @default(DISPONIVEL)
  role                      Role                        @default(EMPLOYEE)
  photo                     String?
  last_access               DateTime?                   @db.Timestamptz(3)
  notificationUserEcommerce NotificationUserEcommerce[]
  commentOrder              CommentOrder[]

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("usersEcommerce")
}

model PasswordRecoveryUserEcommerce {
  id    String @id @default(uuid())
  email String

  @@map("passwordRecoveryUsersEcommerces")
}

model Customer {
  id                    String                 @id @default(uuid()) @db.Uuid
  asaas_customer_id     String?
  email                 String                 @unique
  password              String
  name                  String
  phone                 String
  type_user             TypeUser               @default(FISICA)
  cpf                   String?
  cnpj                  String?
  date_of_birth         String?
  sexo                  String
  state_registration    String?
  photo                 String?
  newsletter            Boolean                @default(false)
  last_access           DateTime?              @db.Timestamptz(3)
  status                StatusCustomer         @default(DISPONIVEL)
  addresses             Address[]
  cart                  Cart?
  orders                Order[]
  reviews               Review[]
  payments              Payment[]
  favorites             Favorite[]
  promotionUsage        PromotionUsage[]
  notificationUserStore NotificationCustomer[]
  abandonedCart         AbandonedCart[]
  commentOrder          CommentOrder[]

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("customers")
}

model PasswordRecoveryCustomer {
  id    String @id @default(uuid())
  email String

  @@map("passwordRecoveryUsersStores")
}

model Product {
  id                   String               @id @default(uuid()) @db.Uuid
  name                 String
  slug                 String?              @unique
  metaTitle            String?
  metaDescription      String?
  keywords             Json?
  brand                String?
  ean                  String?
  description          String
  skuMaster            String?              @unique
  price_of             Float?
  price_per            Float
  weight               Float?
  length               Float?
  width                Float?
  height               Float?
  stock                Int                  @default(0)
  view                 Int?                 @default(0)
  mainPromotion        Promotion?           @relation("FeaturedPromotion", fields: [mainPromotion_id], references: [id])
  mainPromotion_id     String?
  buyTogether          BuyTogether?         @relation(fields: [buyTogether_id], references: [id])
  buyTogether_id       String?
  status               StatusProduct        @default(DISPONIVEL)
  categories           ProductCategory[]
  images               ProductImage[]
  reviews              Review[]
  cartItems            CartItem[]
  orderItems           OrderItem[]
  favorites            Favorite[]
  productsDescriptions ProductDescription[]
  variants             ProductVariant[] // Relacionamento com variantes
  videos               ProductVideo[]
  productView          ProductView[]
  productRelations     ProductRelation[]
  parentRelations      ProductRelation[]    @relation("parentRelation")
  childRelations       ProductRelation[]    @relation("childRelation")
  promotions           Promotion[]          @relation("ProductPromotions")

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("products")
}

model ProductVariant {
  id               String             @id @default(uuid()) @db.Uuid
  product          Product            @relation(fields: [product_id], references: [id])
  product_id       String             @db.Uuid
  sku              String             @unique // SKU único por variante
  price_of         Float?
  price_per        Float
  stock            Int                @default(0)
  allowBackorders  Boolean            @default(false) // Permitir compras sem estoque?
  sortOrder        Int                @default(0)
  ean              String?
  mainPromotion    Promotion?         @relation("variantMainPromotion", fields: [mainPromotion_id], references: [id])
  mainPromotion_id String?
  variantAttribute VariantAttribute[]
  promotions       Promotion[]        @relation("variantPromotions")
  cartItem         CartItem[]

  productVariantImage ProductVariantImage[]
  productVariantVideo ProductVariantVideo[]

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("productsVariants")
}

model ProductVariantVideo {
  id                String         @id @default(uuid())
  url               String
  productVariant    ProductVariant @relation(fields: [productVariant_id], references: [id])
  productVariant_id String         @db.Uuid
  isPrimary         Boolean        @default(false)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("productsVariantVideos")
}

model ProductVariantImage {
  id                String         @id @default(uuid())
  productVariant    ProductVariant @relation(fields: [productVariant_id], references: [id])
  productVariant_id String         @db.Uuid
  url               String
  altText           String?
  isPrimary         Boolean        @default(false)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("productsVariantImages")
}

model VariantAttribute {
  id         String         @id @default(uuid()) @db.Uuid
  variant    ProductVariant @relation(fields: [variant_id], references: [id])
  variant_id String         @db.Uuid
  key        String // ex: "cor"
  value      String // ex: "Azul"
  status     StatusVariant  @default(DISPONIVEL)

  variantAttributeImage VariantAttributeImage[]

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("variantsAttributes")
}

model VariantAttributeImage {
  id                  String           @id @default(uuid())
  variantAttribute    VariantAttribute @relation(fields: [variantAttribute_id], references: [id])
  variantAttribute_id String           @db.Uuid
  url                 String
  altText             String?
  isPrimary           Boolean          @default(false)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("variantsAttributesimages")
}

model ProductRelation {
  id               String              @id @default(uuid())
  parentProduct    Product             @relation(fields: [parentProduct_id], references: [id], name: "parentRelation")
  parentProduct_id String              @db.Uuid
  childProduct     Product             @relation(fields: [childProduct_id], references: [id], name: "childRelation")
  childProduct_id  String              @db.Uuid
  relationType     ProductRelationType @default(VARIANT)
  sortOrder        Int                 @default(0)
  isRequired       Boolean             @default(false)
  product          Product?            @relation(fields: [product_id], references: [id])
  product_id       String?             @db.Uuid

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@unique([parentProduct_id, childProduct_id, relationType])
  @@map("productsRelations")
}

model ProductDescription {
  id          String                   @id @default(uuid())
  product     Product                  @relation(fields: [product_id], references: [id])
  product_id  String                   @db.Uuid
  title       String
  description String
  status      StatusDescriptionProduct @default(DISPONIVEL)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("productsDescriptions")
}

model ProductImage {
  id         String  @id @default(uuid())
  url        String
  altText    String?
  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @db.Uuid
  isPrimary  Boolean @default(false) // Imagem principal?

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("productsImages")
}

model ProductVideo {
  id         String  @id @default(uuid())
  url        String
  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @db.Uuid
  isPrimary  Boolean @default(false)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("productsVideos")
}

model Promotion {
  id            String    @id @default(uuid())
  name          String
  description   String?
  startDate     DateTime? @db.Timestamptz(3)
  endDate       DateTime? @db.Timestamptz(3)
  is_processing Boolean   @default(false)
  is_completed  Boolean   @default(false)
  email_sent    Boolean   @default(false)

  hasCoupon          Boolean @default(true)
  multipleCoupons    Boolean @default(false)
  reuseSameCoupon    Boolean @default(false)
  perUserCouponLimit Int?
  totalCouponCount   Int?

  status     StatusPromotion @default(Disponivel)
  cumulative Boolean         @default(false)
  priority   Int             @default(0)

  coupons           Coupon[]
  conditions        PromotionCondition[]
  actions           PromotionAction[]
  displays          PromotionDisplay[]
  badges            PromotionBadge[]
  products          Product[]            @relation("ProductPromotions")
  variantPromotions ProductVariant[]     @relation("variantPromotions")
  featuredProducts  Product[]            @relation("FeaturedPromotion")
  categories        Category[]
  orders            Order[]
  mainVariants      ProductVariant[]     @relation("variantMainPromotion")
  promotionUsage    PromotionUsage[]

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("promotions")
}

model Coupon {
  id           String    @id @default(uuid())
  code         String    @unique
  promotion    Promotion @relation(fields: [promotion_id], references: [id])
  promotion_id String

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("promotion_coupons")
}

model PromotionCondition {
  id           String        @id @default(uuid())
  promotion    Promotion     @relation(fields: [promotion_id], references: [id])
  promotion_id String
  type         ConditionType
  operator     Operator
  value        Json

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("promotion_conditions")
}

model PromotionAction {
  id           String     @id @default(uuid())
  promotion    Promotion  @relation(fields: [promotion_id], references: [id])
  promotion_id String
  type         ActionType
  params       Json

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("promotion_actions")
}

model PromotionDisplay {
  id           String      @id @default(uuid())
  promotion    Promotion   @relation(fields: [promotion_id], references: [id])
  promotion_id String
  title        String
  type         DisplayType
  content      String

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("promotion_displays")
}

model PromotionBadge {
  id           String    @id @default(uuid())
  promotion    Promotion @relation(fields: [promotion_id], references: [id])
  promotion_id String
  title        String
  imageUrl     String

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("promotion_badges")
}

model ProductView {
  id         String   @id @default(uuid()) @db.Uuid
  product    Product? @relation(fields: [product_id], references: [id], onDelete: SetNull)
  product_id String?  @db.Uuid
  ipAddress  String?  @db.VarChar(45)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@unique([product_id, ipAddress])
  @@map("productsViews")
}

model PromotionUsage {
  id              String    @id @default(uuid())
  promotion       Promotion @relation(fields: [promotion_id], references: [id])
  promotion_id    String
  customer        Customer  @relation(fields: [customer_id], references: [id])
  customer_id     String    @db.Uuid
  order           Order     @relation(fields: [order_id], references: [id])
  order_id        String
  discountApplied Float

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("promotionUsages")
}

model Category {
  id            String            @id @default(uuid())
  name          String            @unique
  slug          String
  description   String?
  image         String?
  order         Int               @default(0)
  parentId      String?
  status        StatusCategory    @default(DISPONIVEL)
  parent        Category?         @relation("Subcategories", fields: [parentId], references: [id])
  children      Category[]        @relation("Subcategories")
  products      ProductCategory[]
  promotion     Promotion?        @relation(fields: [promotion_id], references: [id])
  promotion_id  String?
  directFilters Filter[]          @relation("DirectCategoryFilters")
  filters       CategoryFilter[]
  Filter        Filter?           @relation(fields: [filter_id], references: [id])
  filter_id     String?

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("categories")
}

model ProductCategory {
  id          String   @id @default(uuid())
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  String   @db.Uuid
  category    Category @relation(fields: [category_id], references: [id])
  category_id String

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@unique([product_id, category_id])
  @@map("productCategories")
}

model Review {
  id           String       @id @default(uuid())
  rating       Rating       @default(ONE)
  comment      String?
  product      Product      @relation(fields: [product_id], references: [id])
  product_id   String       @db.Uuid
  customer     Customer     @relation(fields: [customer_id], references: [id])
  customer_id  String       @db.Uuid
  nameCustomer String
  status       StatusReview @default(ANAILSE)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("reviews")
}

model BuyTogether {
  id       String            @id @default(uuid())
  name     String?
  products Json?
  status   StatusBuyTogether @default(SIM)
  product  Product[]

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("buysTogethers")
}

model Order {
  id                String           @id @default(uuid())
  total             Float // Total dos produtos
  shippingCost      Float // Custo do frete (separado para relatórios)
  grandTotal        Float // total + shippingCost - descontos
  status            OrderStatus      @default(PENDING)
  shippingAddress   String
  shippingMethod    String?
  trackingCode      String? // Código de rastreio
  estimatedDelivery String? // Data estimada de entrega
  customer          Customer         @relation(fields: [customer_id], references: [id])
  customer_id       String           @db.Uuid
  promotion         Promotion?       @relation(fields: [promotion_id], references: [id])
  promotion_id      String?
  items             OrderItem[]
  payment           Payment?
  appliedPromotions PromotionUsage[]
  commentOrder      CommentOrder[]

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(uuid())
  quantity   Int     @default(1)
  price      Float
  order      Order   @relation(fields: [order_id], references: [id])
  order_id   String
  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @db.Uuid

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("orderItens")
}

model Cart {
  id            String         @id @default(uuid())
  customer      Customer       @relation(fields: [customer_id], references: [id])
  customer_id   String         @unique @db.Uuid
  items         CartItem[]
  subtotal      Float // Total dos produtos
  shippingCost  Float? // Frete estimado (pode ser atualizado dinamicamente)
  total         Float // subtotal + shippingCost
  AbandonedCart AbandonedCart?

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("carts")
}

model CartItem {
  id         String          @id @default(uuid())
  quantity   Int             @default(1)
  product    Product         @relation(fields: [product_id], references: [id])
  product_id String          @db.Uuid
  cart       Cart            @relation(fields: [cart_id], references: [id])
  cart_id    String
  variant    ProductVariant? @relation(fields: [variant_id], references: [id])
  variant_id String?         @db.Uuid

  created_at DateTime @default(now()) @db.Timestamptz(3)

  // Opcional: único composto (cart+product+variant)
  @@unique([cart_id, product_id, variant_id])
  @@map("cartItens")
}

model CommentOrder {
  id               String             @id @default(uuid())
  order            Order              @relation(fields: [order_id], references: [id])
  order_id         String
  customer         Customer           @relation(fields: [customer_id], references: [id])
  customer_id      String             @db.Uuid
  userEcommerce    UserEcommerce      @relation(fields: [userEcommerce_id], references: [id])
  userEcommerce_id String
  message          String
  status           StatusCommentOrder @default(PRIVATE)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("commentsOrder")
}

model AbandonedCart {
  id             String          @id @default(uuid())
  cart           Cart            @relation(fields: [cart_id], references: [id])
  cart_id        String          @unique
  customer       Customer        @relation(fields: [customer_id], references: [id])
  customer_id    String          @db.Uuid
  items          Json // Ex: [{ product_id: "123", quantity: 2, price: 99.90 }]
  total          Float
  abandonedAt    DateTime        @default(now())
  reminderSentAt DateTime? // Último lembrete enviado
  reminderCount  Int             @default(0) // Quantidade de lembretes enviados
  discountCode   String? // Cupom de desconto opcional
  reminders      EmailReminder[] // Histórico de e-mails enviados

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("abandonedCarts")
}

model EmailReminder {
  id          String        @id @default(uuid())
  cart        AbandonedCart @relation(fields: [cart_id], references: [id])
  cart_id     String
  template    EmailTemplate @relation(fields: [template_id], references: [id])
  template_id String
  sentAt      DateTime      @default(now())
  opened      Boolean       @default(false)
  clicked     Boolean       @default(false)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("emailReminders")
}

model EmailTemplate {
  id            String          @id @default(uuid())
  title         String
  subject       String? // Assunto do e-mail (pode usar variáveis como {{customerName}})
  templateName  String // Nome do arquivo EJS (ex: "admin-register.ejs")
  variables     Json? // Ex: ["customerName", "cartItems", "discountCode"]
  isActive      Boolean         @default(true)
  hoursAfter    Int? // horas após o abandono para disparar (ex: 1, 3, 7)
  emailReminder EmailReminder[]

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@unique([templateName])
  @@map("emailTemplates")
}

model Payment {
  id                String        @id @default(uuid())
  amount            Float
  method            PaymentMethod // Mantém o enum (ajustar conforme ASAAS)
  status            PaymentStatus @default(PENDING)
  transaction_id    String? // ID do pagamento na ASAAS (ex: "pay_123456")
  asaas_customer_id String? // ID do cliente na ASAAS (ex: "cus_000005984447")
  asaas_payment_id  String? // ID único do pagamento na ASAAS (ex: "pay_123456")
  description       String? // Descrição opcional
  installment_plan  Json? // Parcelamento (ex: { installments: 3, value: 33.33 })
  pix_qr_code       String? // QR Code do PIX (base64 ou URL)
  pix_expiration    DateTime? // Data de expiração do PIX
  boleto_url        String? // URL do boleto PDF
  boleto_barcode    String? // Código de barras do boleto
  credit_card_token String? // Token do cartão (se usar salvar cartão)
  gateway_response  Json? // Resposta completa da ASAAS (para debug)
  order             Order         @relation(fields: [order_id], references: [id])
  order_id          String        @unique
  customer          Customer      @relation(fields: [customer_id], references: [id])
  customer_id       String        @db.Uuid

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("payments")
}

model PaymentWebhook {
  id               String  @id @default(uuid())
  event            String // Ex: "PAYMENT_RECEIVED", "PAYMENT_OVERDUE"
  payload          Json // Dados completos do webhook
  asaas_payment_id String // ID do pagamento na ASAAS
  processed        Boolean @default(false) // Indica se o evento foi processado
  attempts         Int     @default(0) // Número de tentativas de processamento

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("paymentWebhooks")
}

model Address {
  id           String   @id @default(uuid())
  customer     Customer @relation(fields: [customer_id], references: [id])
  customer_id  String   @db.Uuid
  street       String
  city         String
  state        String
  zipCode      String
  number       String?
  neighborhood String?
  country      String
  complement   String?
  reference    String?

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("address")
}

model Favorite {
  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String   @db.Uuid
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  String   @db.Uuid

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@id([customer_id, product_id])
  @@map("favorites")
}

model FormContact {
  id             String @id @default(uuid())
  name_user      String @db.VarChar(200)
  slug_name_user String
  email_user     String @db.VarChar(200)
  subject        String @db.VarChar(250)
  message        String @db.VarChar(5000)

  created_at DateTime? @default(now()) @db.Timestamptz(3)

  @@map("formContacts")
}

model Newsletter {
  id         String @id @default(uuid())
  email_user String @db.VarChar(100)

  created_at DateTime? @default(now()) @db.Timestamptz(3)

  @@map("newsletters")
}

model NotificationUserEcommerce {
  id               String           @id @default(uuid())
  userEcommerce    UserEcommerce?   @relation(fields: [userEcommerce_id], references: [id])
  userEcommerce_id String?
  type             NotificationType @default(INDEFINIDO)
  message          String           @db.VarChar(500)
  read             Boolean          @default(false)
  link             String?

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("notificationUsersEcommerce")
}

model NotificationCustomer {
  id          String           @id @default(uuid())
  customer    Customer?        @relation(fields: [customer_id], references: [id])
  customer_id String?          @db.Uuid
  type        NotificationType @default(INDEFINIDO)
  message     String           @db.VarChar(500)
  read        Boolean          @default(false)
  link        String?

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@map("notificationCustomers")
}

model MarketingPublication {
  id               String                     @id @default(uuid()) @db.Uuid
  title            String?                    @db.VarChar(555)
  description      String?                    @db.VarChar(7000)
  local            String?                    @db.VarChar(555)
  image_url        String?                    @db.VarChar(4083)
  redirect_url     String?                    @db.VarChar(5083)
  position         Position
  conditions       String?
  clicks           Float?                     @default(0)
  text_button      String?                    @db.VarChar(100)
  status           StatusMarketingPublication @default(Disponivel)
  text_publication String?                    @db.VarChar(7000)
  popup_time       Int?
  publish_at_start DateTime?                  @db.Timestamptz(3)
  publish_at_end   DateTime?                  @db.Timestamptz(3)
  is_processing    Boolean                    @default(false)
  is_completed     Boolean                    @default(false)
  email_sent       Boolean                    @default(false)

  marketingPublicationView MarketingPublicationView[]

  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@map("marketingPublications")
}

model BannerInterval {
  id                    String  @id @default(uuid())
  interval_banner       Int
  label_interval_banner String
  local_site            String?
  label_local_site      String?

  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt

  @@map("bannerIntervals")
}

model MarketingPublicationView {
  id                      String                @id @default(uuid()) @db.Uuid
  marketingPublication    MarketingPublication? @relation(fields: [marketingPublication_id], references: [id], onDelete: SetNull)
  marketingPublication_id String?               @db.Uuid
  ipAddress               String?               @db.VarChar(45)

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@unique([marketingPublication_id, ipAddress])
  @@map("marketingPublicationViews")
}

model Filter {
  id               String             @id @default(uuid())
  name             String // Nome a ser exibido no front (ex.: "Preço", "Cor")
  fieldName        String // Nome do campo ou identificador associado (ex.: "price_per" ou "variantAttribute")
  type             FilterType // Tipo de filtro: RANGE, SELECT, MULTI_SELECT
  dataType         FilterDataType // Tipo de dado subjacente (NUMBER, STRING, etc.)
  displayStyle     FilterDisplayStyle // Define o componente visual a ser usado
  isActive         Boolean            @default(true) // Permite ativar/desativar o filtro via CMS
  order            Int                @default(0) // Define a ordem de exibição entre os filtros
  autoPopulate     Boolean            @default(false) // Se verdadeiro, o sistema pode preencher opções baseado nos produtos cadastrados
  // Para filtros do tipo RANGE
  minValue         Float? // Ex.: preço mínimo pré-configurado (opcional)
  maxValue         Float? // Ex.: preço máximo pré-configurado (opcional)
  // Relacionamento com grupos de filtros (opcional)
  group            FilterGroup?       @relation(fields: [groupId], references: [id])
  groupId          String?
  // Relacionamento com opções (para SELECT ou MULTI_SELECT)
  options          FilterOption[]
  // Relação direta nomeada (ex.: para um filtro "principal" de uma categoria)
  directCategories Category[]         @relation("DirectCategoryFilters")
  // Relação via tabela de junção (para configuração dinâmica)
  category         Category[]
  categoryFilter   CategoryFilter[]

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("filters")
}

model FilterOption {
  id        String  @id @default(uuid())
  filter    Filter  @relation(fields: [filter_id], references: [id])
  filter_id String
  label     String // Texto exibido (ex.: "Azul", "Médio", "2023")
  value     String // Valor utilizado para a query
  order     Int     @default(0) // Ordem de exibição
  iconUrl   String? // URL para ícone (útil para filtros de cor ou ícones específicos)
  colorCode String? // Código de cor (ex.: "#FF0000"), se aplicável
  isDefault Boolean @default(false) // Se essa opção for padrão na interface

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("filterOptions")
}

model FilterGroup {
  id      String   @id @default(uuid())
  name    String // Nome do grupo (ex.: "Características", "Preço")
  order   Int      @default(0) // Ordem de exibição do grupo na interface de usuário
  // Relacionamento com filtros que pertencem a este grupo
  filters Filter[]

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("filterGroups")
}

model CategoryFilter {
  id          String   @id @default(uuid())
  category    Category @relation(fields: [category_id], references: [id])
  category_id String
  filter      Filter   @relation(fields: [filter_id], references: [id])
  filter_id   String

  created_at DateTime @default(now()) @db.Timestamptz(3)

  @@unique([category_id, filter_id])
  @@map("categoryFilters")
}

model Menu {
  id         String     @id @default(uuid())
  name       String // Nome do menu (ex.: "Header Menu", "Footer Menu")
  position   String
  identifier String?
  isActive   Boolean    @default(true)
  order      Int        @default(0) // Caso queira ter vários menus e precise de ordenação
  icon       String?
  items      MenuItem[] // Relação com itens de menu

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("menus")
}

model MenuItem {
  id             String       @id @default(uuid())
  label          String // Texto exibido no front (ex.: "Maquinas de Corte", "Consumíveis")
  type           MenuItemType // Tipo de link (INTERNAL_LINK, EXTERNAL_LINK, CATEGORY, etc.)
  url            String? // Ex.: "/minha-pagina" ou "https://google.com"
  // Caso o item referencie uma categoria ou produto, podemos ter campos de referência (opcionais):
  category_id    String? // Se type = CATEGORY
  product_id     String? // Se type = PRODUCT
  // Caso use páginas customizadas, você pode ter algo como:
  customPageSlug String? // Se type = CUSTOM_PAGE
  icon           String? // Ícone (se quiser exibir um ícone ao lado do label)
  isActive       Boolean      @default(true)
  order          Int          @default(0) // Define a ordem do item dentro do menu ou subitem
  // Referência ao menu principal a que este item pertence
  menu           Menu?        @relation(fields: [menu_id], references: [id])
  menu_id        String?
  // Relacionamento recursivo para submenus
  parent         MenuItem?    @relation("MenuItemChildren", fields: [parentId], references: [id])
  parentId       String?
  children       MenuItem[]   @relation("MenuItemChildren")

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("menuItems")
}