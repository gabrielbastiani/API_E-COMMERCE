// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar uma migration: yarn prisma migrate dev

enum TypeUser {
  FISICA
  JURIDICA
}

enum Role {
  EMPLOYEE
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  PIX
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum StatusUserEcommerce {
  DISPONIVEL
  INDISPONIVEL
}

enum StatusDescriptionProduct {
  DISPONIVEL
  INDISPONIVEL
}

model User_ecommerce {
  id       String              @id @default(uuid())
  name     String
  email    String              @unique
  password String
  status   StatusUserEcommerce @default(INDISPONIVEL)
  role     Role                @default(EMPLOYEE)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("users_ecommerce")
}

model User_store {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  name               String
  phone              String
  type_user          TypeUser   @default(FISICA)
  cpf                String?
  cnpj               String?
  date_of_birth      String?
  sexo               String
  state_registration String?
  photo              String?
  role               Role       @default(EMPLOYEE)
  addresses          Address[]
  cart               Cart?
  orders             Order[]
  reviews            Review[]
  payments           Payment[]
  favorites          Favorite[]

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("users_store")
}

model Product {
  id                    String                @id @default(uuid())
  name                  String
  brand                 String?
  price_of              Float?
  price_per             Float
  sku                   String                @unique
  stock                 Int                   @default(0)
  categories            ProductCategory[]
  images                ProductImage[]
  reviews               Review[]
  cartItems             CartItem[]
  orderItems            OrderItem[]
  favorites             Favorite[]
  products_descriptions Product_description[]

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("products")
}

model Product_description {
  id          String                   @id @default(uuid())
  product     Product                  @relation(fields: [product_id], references: [id])
  product_id  String
  title       String
  description String
  status      StatusDescriptionProduct @default(DISPONIVEL)

  created_at DateTime @default(now()) @db.Timestamptz(3)
  updated_at DateTime @updatedAt

  @@map("products_descriptions")
}

model Category {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  products    ProductCategory[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())

  @@id([productId, categoryId])
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Review {
  id        String     @id @default(uuid())
  rating    Int        @range(1, 5)
  comment   String?
  productId String
  userId    String
  product   Product    @relation(fields: [productId], references: [id])
  user      User_store @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Order {
  id              String      @id @default(uuid())
  total           Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  userId          String
  shippingAddress String
  user            User_store  @relation(fields: [userId], references: [id])
  items           OrderItem[]
  payment         Payment?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  orderId   String
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User_store @relation(fields: [userId], references: [id])
  items     CartItem[]
  total     Decimal    @default(0) @db.Decimal(10, 2)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  productId String
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  orderId       String        @unique
  userId        String
  order         Order         @relation(fields: [orderId], references: [id])
  user          User_store    @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Address {
  id        String     @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  userId    String
  user      User_store @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Favorite {
  userId    String
  productId String
  user      User_store @relation(fields: [userId], references: [id])
  product   Product    @relation(fields: [productId], references: [id])
  createdAt DateTime   @default(now())

  @@id([userId, productId])
}
